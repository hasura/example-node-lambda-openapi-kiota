// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createApiResponseFromDiscriminatorValue, type ApiResponse } from '../../../models/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

export interface UploadImageRequestBuilderPostQueryParameters {
    /**
     * Additional Metadata
     */
    additionalMetadata?: string;
}
/**
 * Builds and executes requests for operations under /pet/{petId}/uploadImage
 */
export class UploadImageRequestBuilder extends BaseRequestBuilder<UploadImageRequestBuilder> {
    /**
     * Instantiates a new UploadImageRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/pet/{petId}/uploadImage{?additionalMetadata*}", (x, y) => new UploadImageRequestBuilder(x, y));
    }
    /**
     * uploads an image
     * @param body Binary request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ApiResponse
     */
    public post(body: ArrayBuffer | undefined, requestConfiguration?: RequestConfiguration<UploadImageRequestBuilderPostQueryParameters> | undefined) : Promise<ApiResponse | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        return this.requestAdapter.sendAsync<ApiResponse>(requestInfo, createApiResponseFromDiscriminatorValue, undefined);
    }
    /**
     * @param body Binary request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: ArrayBuffer | undefined, requestConfiguration?: RequestConfiguration<UploadImageRequestBuilderPostQueryParameters> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setStreamContent(body, "application/octet-stream");
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
