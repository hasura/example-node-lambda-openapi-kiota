// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { PetRequestBuilder } from './pet/';
import { StoreRequestBuilder } from './store/';
import { UserRequestBuilder } from './user/';
import { BaseRequestBuilder, ParseNodeFactoryRegistry, SerializationWriterFactoryRegistry, enableBackingStoreForSerializationWriterFactory, registerDefaultDeserializer, registerDefaultSerializer, type RequestAdapter } from '@microsoft/kiota-abstractions';
import { FormParseNodeFactory, FormSerializationWriterFactory } from '@microsoft/kiota-serialization-form';
import { JsonParseNodeFactory, JsonSerializationWriterFactory } from '@microsoft/kiota-serialization-json';
import { MultipartSerializationWriterFactory } from '@microsoft/kiota-serialization-multipart';
import { TextParseNodeFactory, TextSerializationWriterFactory } from '@microsoft/kiota-serialization-text';

/**
 * The main entry point of the SDK, exposes the configuration and the fluent API.
 */
export class PetstoreClient extends BaseRequestBuilder<PetstoreClient> {
    /**
     * The pet property
     */
    public get pet(): PetRequestBuilder {
        return new PetRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * The store property
     */
    public get store(): StoreRequestBuilder {
        return new StoreRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * The user property
     */
    public get user(): UserRequestBuilder {
        return new UserRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Instantiates a new PostsClient and sets the default values.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(requestAdapter: RequestAdapter) {
        super({}, requestAdapter, "{+baseurl}", (x, y) => new PetstoreClient(y));
        registerDefaultSerializer(JsonSerializationWriterFactory);
        registerDefaultSerializer(TextSerializationWriterFactory);
        registerDefaultSerializer(FormSerializationWriterFactory);
        registerDefaultSerializer(MultipartSerializationWriterFactory);
        registerDefaultDeserializer(JsonParseNodeFactory);
        registerDefaultDeserializer(TextParseNodeFactory);
        registerDefaultDeserializer(FormParseNodeFactory);
        if (requestAdapter.baseUrl === undefined || requestAdapter.baseUrl === "") {
            requestAdapter.baseUrl = "/api/v3";
        }
        this.pathParameters["baseurl"] = requestAdapter.baseUrl;
    }
}
// tslint:enable
// eslint-enable
