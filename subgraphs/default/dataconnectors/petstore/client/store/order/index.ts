// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createOrderFromDiscriminatorValue, deserializeIntoOrder, serializeOrder, type Order } from '../../models/';
import { WithOrderItemRequestBuilder } from './item/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, getPathParameters, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /store/order
 */
export class OrderRequestBuilder extends BaseRequestBuilder<OrderRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.store.order.item collection
     * @param orderId ID of order that needs to be fetched
     * @returns a WithOrderItemRequestBuilder
     */
    public byOrderId(orderId: number) : WithOrderItemRequestBuilder {
        if(!orderId) throw new Error("orderId cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["orderId"] = orderId
        return new WithOrderItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    /**
     * Instantiates a new OrderRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/store/order", (x, y) => new OrderRequestBuilder(x, y));
    }
    /**
     * Place a new order in the store
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Order
     */
    public post(body: Order, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Order | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        return this.requestAdapter.sendAsync<Order>(requestInfo, createOrderFromDiscriminatorValue, undefined);
    }
    /**
     * Place a new order in the store
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: Order, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeOrder);
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
