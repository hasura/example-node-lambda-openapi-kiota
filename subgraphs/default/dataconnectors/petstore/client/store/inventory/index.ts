// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createInventoryGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoInventoryGetResponse;
}
export function deserializeIntoInventoryGetResponse(inventoryGetResponse: InventoryGetResponse | undefined = {} as InventoryGetResponse) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
export interface InventoryGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
export function serializeInventoryGetResponse(writer: SerializationWriter, inventoryGetResponse: InventoryGetResponse | undefined = {} as InventoryGetResponse) : void {
    writer.writeAdditionalData(inventoryGetResponse.additionalData);
}
/**
 * Builds and executes requests for operations under /store/inventory
 */
export class InventoryRequestBuilder extends BaseRequestBuilder<InventoryRequestBuilder> {
    /**
     * Instantiates a new InventoryRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/store/inventory", (x, y) => new InventoryRequestBuilder(x, y));
    }
    /**
     * Returns a map of status codes to quantities
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of InventoryGetResponse
     */
    public get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<InventoryGetResponse | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        return this.requestAdapter.sendAsync<InventoryGetResponse>(requestInfo, createInventoryGetResponseFromDiscriminatorValue, undefined);
    }
    /**
     * Returns a map of status codes to quantities
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.GET, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
