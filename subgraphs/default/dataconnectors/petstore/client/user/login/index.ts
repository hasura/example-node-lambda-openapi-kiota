// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

export interface LoginRequestBuilderGetQueryParameters {
    /**
     * The password for login in clear text
     */
    password?: string;
    /**
     * The user name for login
     */
    username?: string;
}
/**
 * Builds and executes requests for operations under /user/login
 */
export class LoginRequestBuilder extends BaseRequestBuilder<LoginRequestBuilder> {
    /**
     * Instantiates a new LoginRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/user/login{?username*,password*}", (x, y) => new LoginRequestBuilder(x, y));
    }
    /**
     * Logs user into the system
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of String
     */
    public get(requestConfiguration?: RequestConfiguration<LoginRequestBuilderGetQueryParameters> | undefined) : Promise<string | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        return this.requestAdapter.sendPrimitiveAsync<string>(requestInfo, "string", undefined);
    }
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: RequestConfiguration<LoginRequestBuilderGetQueryParameters> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.GET, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
