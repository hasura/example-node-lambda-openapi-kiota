// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createUserFromDiscriminatorValue, deserializeIntoUser, serializeUser, type User } from '../models/';
import { CreateWithListRequestBuilder } from './createWithList/';
import { WithUsernameItemRequestBuilder } from './item/';
import { LoginRequestBuilder } from './login/';
import { LogoutRequestBuilder } from './logout/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, getPathParameters, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /user
 */
export class UserRequestBuilder extends BaseRequestBuilder<UserRequestBuilder> {
    /**
     * The createWithList property
     */
    public get createWithList(): CreateWithListRequestBuilder {
        return new CreateWithListRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * The login property
     */
    public get login(): LoginRequestBuilder {
        return new LoginRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * The logout property
     */
    public get logout(): LogoutRequestBuilder {
        return new LogoutRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Gets an item from the ApiSdk.user.item collection
     * @param username The name that needs to be fetched. Use user1 for testing. 
     * @returns a WithUsernameItemRequestBuilder
     */
    public byUsername(username: string) : WithUsernameItemRequestBuilder {
        if(!username) throw new Error("username cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["username"] = username
        return new WithUsernameItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    /**
     * Instantiates a new UserRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/user", (x, y) => new UserRequestBuilder(x, y));
    }
    /**
     * This can only be done by the logged in user.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ArrayBuffer
     */
    public post(body: User, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createUserFromDiscriminatorValue,
            "5XX": createUserFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendPrimitiveAsync<ArrayBuffer>(requestInfo, "ArrayBuffer", errorMapping);
    }
    /**
     * This can only be done by the logged in user.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: User, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json, application/xml");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeUser);
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
